<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Hello Koding]]></title><description><![CDATA[Code tutorials and examples]]></description><link>http://hellokoding.com/</link><generator>Ghost 0.9</generator><lastBuildDate>Sat, 02 Dec 2017 09:17:40 GMT</lastBuildDate><atom:link href="http://hellokoding.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Longest Increasing Subsequence]]></title><description><![CDATA[<h3 id="whatissubsequence">What is Subsequence?</h3>

<p>A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the sequence {A, B, D} is a subsequence of {A, B, C, D, E, F} obtained after removal of elements C,</p>]]></description><link>http://hellokoding.com/longest-increasing-subsequence/</link><guid isPermaLink="false">a43199e2-2402-41a0-a29f-af463aa0104f</guid><category><![CDATA[Core]]></category><category><![CDATA[Algorithm]]></category><category><![CDATA[Dynamic Programming]]></category><category><![CDATA[Java]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Tue, 10 Oct 2017 15:10:49 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/10/DynamicProgramming-1.png" medium="image"/><content:encoded><![CDATA[<h3 id="whatissubsequence">What is Subsequence?</h3>

<img src="http://hellokoding.com/content/images/2017/10/DynamicProgramming-1.png" alt="Longest Increasing Subsequence"><p>A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the sequence {A, B, D} is a subsequence of {A, B, C, D, E, F} obtained after removal of elements C, E, and F.</p>

<h3 id="whatislongestincreasingsubsequencelis">What is Longest Increasing Subsequence (LIS)?</h3>

<p>The increasing subsequences of array {3, 2, 6, 4, 5, 1} are {3, 6}, {2, 6}, {2, 4, 5}, and {1}. The longest is {2, 4, 5}.</p>

<h3 id="problem">Problem</h3>

<p>Find the longest subsequence in a given unsorted array of integers such that all elements of the subsequence are sorted in ascending order. For example, the longest increasing subsequence of {3, 2, 6, 4, 5, 1} is {2, 4, 5}. </p>

<h3 id="approach">Approach</h3>

<p><strong>Find the longest increasing subsequence of a given array</strong></p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/core-datastructure-algorithm-java/blob/master/src/com/hellokoding/core/dynamic/LIS/FindLIS.java">
</code></pre>

<p>Time complexity: O(n<sup>2</sup>) <br>
Space complexity: O(n)</p>

<p><strong>Find only the length of the longest increasing subsequence of a given array</strong></p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/core-datastructure-algorithm-java/blob/master/src/com/hellokoding/core/dynamic/LIS/findLengthOfLIS.java">
</code></pre>

<p>Time complexity: O(n<sup>2</sup>) <br>
Space complexity: O(n)</p>

<h3 id="references">References</h3>

<p><a href="https://www.youtube.com/watch?v=4fQJGoeW5VE">Longest Increasing Subsequence (youtube.com)</a></p>]]></content:encoded></item><item><title><![CDATA[Disjoint Sets Data Structures and Union Find Algorithm]]></title><description><![CDATA[<h3 id="whataredisjointsets">What are Disjoint Sets?</h3>

<p>Disjoint sets are sets whose intersection is the empty set. For example, {0, 1, 2} and {3} are disjoint sets, while {0, 1, 2} and {2, 3} are not.</p>

<h3 id="problem">Problem</h3>

<p>Given some separated elements grouped in disjoint sets. <strong>Find</strong> whether 2 elements are in the same</p>]]></description><link>http://hellokoding.com/disjoint-sets-data-structure-and-union-find-algorithm/</link><guid isPermaLink="false">40fec8e1-b050-425a-a8b5-c1a23e213c11</guid><category><![CDATA[Core]]></category><category><![CDATA[Data Structure]]></category><category><![CDATA[DisjoinSet]]></category><category><![CDATA[Algorithm]]></category><category><![CDATA[UnionFind]]></category><category><![CDATA[Java]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Sat, 23 Sep 2017 15:33:06 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/09/Screen-Shot-2017-09-24-at-11-11-23-AM-1.png" medium="image"/><content:encoded><![CDATA[<h3 id="whataredisjointsets">What are Disjoint Sets?</h3>

<img src="http://hellokoding.com/content/images/2017/09/Screen-Shot-2017-09-24-at-11-11-23-AM-1.png" alt="Disjoint Sets Data Structures and Union Find Algorithm"><p>Disjoint sets are sets whose intersection is the empty set. For example, {0, 1, 2} and {3} are disjoint sets, while {0, 1, 2} and {2, 3} are not.</p>

<h3 id="problem">Problem</h3>

<p>Given some separated elements grouped in disjoint sets. <strong>Find</strong> whether 2 elements are in the same set or not.</p>

<h3 id="approach">Approach</h3>

<ul>
<li><p><strong>How to determine if 2 elements are in the same set?</strong> Check if they have the same set root/representative.</p></li>
<li><p><strong>How to determine the root/representative of a set?</strong> Choose the biggest index of a set or by rank.</p></li>
</ul>

<h3 id="implementation">Implementation</h3>

<p><strong>Find with compress path and Union by biggest index</strong></p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/core-datastructure-algorithm-java/blob/master/src/com/hellokoding/core/disjoinset/DisjoinSetUnionByBiggestIndex.java">
</code></pre>

<p>Inital state of <code>parents</code> <br>
<img src="http://hellokoding.com/content/images/2017/10/Screen-Shot-2017-09-25-at-9-39-09-PM.png" alt="Disjoint Sets Data Structures and Union Find Algorithm"></p>

<p>Final state of <code>parents</code> <br>
<img src="http://hellokoding.com/content/images/2017/09/Screen-Shot-2017-09-24-at-10-40-12-AM.png" alt="Disjoint Sets Data Structures and Union Find Algorithm"></p>

<p><strong>Find with compress path and Union by rank</strong></p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/core-datastructure-algorithm-java/blob/master/src/com/hellokoding/core/disjoinset/DisjoinSetUnionByRank.java">
</code></pre>

<p>Final state of <code>parents</code> <br>
<img src="http://hellokoding.com/content/images/2017/09/Screen-Shot-2017-09-24-at-11-11-23-AM.png" alt="Disjoint Sets Data Structures and Union Find Algorithm"></p>

<h3 id="references">References</h3>

<p><a href="https://www.topcoder.com/community/data-science/data-science-tutorials/disjoint-set-data-structures/">Disjoin-set Data Structures (topcoder.com)</a></p>]]></content:encoded></item><item><title><![CDATA[RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA Many To Many Extra Columns Relationship and MySQL]]></title><description><![CDATA[<p>This post walks you through the process of creating a RESTful API Example with Spring Data REST, Spring Data JPA Many To Many Extra Columns Relationship and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li></ul>]]></description><link>http://hellokoding.com/restful-api-example-with-spring-boot-spring-data-rest-spring-data-jpa-many-to-many-extra-columns-relationship-and-mysql/</link><guid isPermaLink="false">e1d00df5-74f8-4cd1-bca6-9660663b3ef2</guid><category><![CDATA[Arch]]></category><category><![CDATA[RESTful]]></category><category><![CDATA[Spring Data REST]]></category><category><![CDATA[Spring Data JPA]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[Java]]></category><category><![CDATA[MySQL]]></category><category><![CDATA[cURL]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Sun, 13 Aug 2017 08:18:00 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/08/RESTfulAPI.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/08/RESTfulAPI.png" alt="RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA Many To Many Extra Columns Relationship and MySQL"><p>This post walks you through the process of creating a RESTful API Example with Spring Data REST, Spring Data JPA Many To Many Extra Columns Relationship and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── restfulapi
│       │               ├── Application.java
│       │               ├── model
│       │               │   ├── Book.java
│       │               │   ├── BookPublisher.java
│       │               │   └── Publisher.java
│       │               └── repository
│       │                   ├── BookPublisherRepository.java
│       │                   ├── BookRepository.java
│       │                   └── PublisherRepository.java
│       └── resources
│           └── application.properties
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/pom.xml">
</code></pre>

<h3 id="createdatabase">Create database</h3>

<p>Create a new empty MySQL database named <code>restful_api</code>. Tables will be auto created by Hibernate when the application started</p>

<h3 id="createdomainobjects">Create domain objects</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/Book.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/Publisher.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/BookPublisher.java">
</code></pre>

<h3 id="springdatarepository">Spring Data Repository</h3>

<p>Spring Data JPA and Spring Data Rest will auto create some helper methods and RESTful APIs. For this example, we only need to extend JpaRepository</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/BookRepository.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/PublisherRepository.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/BookPublisherRepository.java">
</code></pre>

<h3 id="applicationproperties">Application Properties</h3>

<pre><code class="language-markup embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/resources/application.properties">
</code></pre>

<h3 id="runtheapplication">Run the application</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/Application.java">
</code></pre>

<p>Type <code>mvn clean spring-boot:run</code> on terminal at the project root directory to run</p>

<h3 id="testtheapplication">Test the application</h3>

<p>Create a new book  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"name\" : \"Book 1\"}" http://localhost:8080/books  
</code></pre>

<p>Create a new publisher  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"name\" : \"Publisher 1\"}" http://localhost:8080/publishers  
</code></pre>

<p>Link the book with the publisher  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"book\" : \"http://localhost:8080/books/1\", \"publisher\" : \"http://localhost:8080/publishers/1\", \"publishedDate\": \"2017-01-01\"}" http://localhost:8080/bookPublishers  
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql.git</code></p>

<p><a href="https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql">https://github.com/hellokoding/restfulapi-springdatarest-manytomany-extracolumns-mysql</a></p>]]></content:encoded></item><item><title><![CDATA[RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA Many To Many Relationship and MySQL]]></title><description><![CDATA[<p>This post walks you through the process of creating a RESTful API Example with Spring Data REST, Spring Data JPA Many To Many Relationship and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>]]></description><link>http://hellokoding.com/restful-api-example-with-spring-boot-spring-data-rest-spring-data-jpa-many-to-many-relationship-and-mysql/</link><guid isPermaLink="false">0878fe69-9f33-4c15-ae4d-7c8f6aeca459</guid><category><![CDATA[Arch]]></category><category><![CDATA[RESTful]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[Spring Data REST]]></category><category><![CDATA[Spring Data JPA]]></category><category><![CDATA[Java]]></category><category><![CDATA[MySQL]]></category><category><![CDATA[cURL]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Thu, 13 Jul 2017 23:54:08 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/07/RESTfulAPI-1.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/07/RESTfulAPI-1.png" alt="RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA Many To Many Relationship and MySQL"><p>This post walks you through the process of creating a RESTful API Example with Spring Data REST, Spring Data JPA Many To Many Relationship and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── restfulapi
│       │               ├── Application.java
│       │               ├── model
│       │               │   ├── Author.java
│       │               │   └── Book.java
│       │               └── repository
│       │                   ├── AuthorRepository.java
│       │                   └── BookRepository.java
│       └── resources
│           └── application.properties
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/pom.xml">
</code></pre>

<h3 id="createdatabase">Create database</h3>

<p>Create a new empty MySQL database named <code>restful_api</code>. Tables will be auto created by Hibernate when the application started</p>

<h3 id="createdomainobjects">Create domain objects</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/Book.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/Author.java">
</code></pre>

<h3 id="springdatarepository">Spring Data Repository</h3>

<p>Spring Data JPA and Spring Data Rest will auto create some helper methods and RESTful APIs. For this example, we only need to extend JpaRepository</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/BookRepository.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/AuthorRepository.java">
</code></pre>

<h3 id="applicationproperties">Application Properties</h3>

<pre><code class="language-markup embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/src/main/resources/application.properties">
</code></pre>

<h3 id="runtheapplication">Run the application</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/Application.java">
</code></pre>

<p>Type <code>mvn clean spring-boot:run</code> on terminal at the project root directory to run</p>

<h3 id="testtheapplication">Test the application</h3>

<p>Create a new book  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"title\" : \"Hello Koding\", \"description\": \"Simple coding examples and tutorials\"}" http://localhost:8080/books  
</code></pre>

<p>Create a new author  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"name\":\"Author 1\"}" http://localhost:8080/authors  
</code></pre>

<p>Assign the author to the book  </p>

<pre><code>curl -i -X PUT -H "Content-Type:text/uri-list" -d "http://localhost:8080/authors/1" http://localhost:8080/books/1/authors  
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/restfulapi-springdatarest-manytomany-mysql.git</code></p>

<p><a href="https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql">https://github.com/hellokoding/restfulapi-springdatarest-manytomany-mysql</a></p>]]></content:encoded></item><item><title><![CDATA[RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA One To Many Relationship and MySQL]]></title><description><![CDATA[<p>This post walks you through the process of creating a RESTful API Example with Spring Data REST, Spring Data JPA One To Many Relationship and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>]]></description><link>http://hellokoding.com/restful-api-example-with-spring-boot-spring-data-rest-one-to-many-relationship-and-mysql/</link><guid isPermaLink="false">20ee456c-6264-419c-a36c-356b84b25dcd</guid><category><![CDATA[Arch]]></category><category><![CDATA[RESTful]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[Spring Data REST]]></category><category><![CDATA[Spring Data JPA]]></category><category><![CDATA[Java]]></category><category><![CDATA[MySQL]]></category><category><![CDATA[cURL]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Sun, 09 Jul 2017 00:41:58 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/07/RESTfulAPI.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/07/RESTfulAPI.png" alt="RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA One To Many Relationship and MySQL"><p>This post walks you through the process of creating a RESTful API Example with Spring Data REST, Spring Data JPA One To Many Relationship and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── restfulapi
│       │               ├── Application.java
│       │               ├── model
│       │               │   ├── Book.java
│       │               │   └── BookCategory.java
│       │               └── repository
│       │                   ├── BookCategoryRepository.java
│       │                   └── BookRepository.java
│       └── resources
│           └── application.properties
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/pom.xml">
</code></pre>

<h3 id="createdatabase">Create database</h3>

<p>Create a new empty MySQL database named <code>restful_api</code>. Tables will be auto created by Hibernate when the application started</p>

<h3 id="createdomainobjects">Create domain objects</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/BookCategory.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/Book.java">
</code></pre>

<h3 id="springdatarepository">Spring Data Repository</h3>

<p>Spring Data JPA and Spring Data Rest will auto create some helper methods and RESTful APIs. For this example, we only need to extend JpaRepository</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/BookCategoryRepository.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/BookRepository.java">
</code></pre>

<h3 id="applicationproperties">Application Properties</h3>

<pre><code class="language-markup embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/src/main/resources/application.properties">
</code></pre>

<h3 id="runtheapplication">Run the application</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/Application.java">
</code></pre>

<p>Type <code>mvn clean spring-boot:run</code> on terminal at the project root directory to run</p>

<h3 id="testtheapplication">Test the application</h3>

<p>Create a new category  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"name\":\"Cat 1\"}" http://localhost:8080/bookCategories  
</code></pre>

<p>Create a new book  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"title\" : \"Hello Koding\", \"description\": \"Simple coding examples and tutorials\"}" http://localhost:8080/books  
</code></pre>

<p>Assign book to category  </p>

<pre><code>curl -i -X PUT -H "Content-Type:text/uri-list" -d "http://localhost:8080/bookCategories/1" http://localhost:8080/books/1/bookCategory  
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/restfulapi-springdatarest-onetomany-mysql.git</code></p>

<p><a href="https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql">https://github.com/hellokoding/restfulapi-springdatarest-onetomany-mysql</a></p>]]></content:encoded></item><item><title><![CDATA[Spring Boot Tutorial Series]]></title><description><![CDATA[<h3 id="helloworld">Hello World</h3>

<ul>
<li><a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a></li>
<li><a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a></li>
<li><a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a></li>
</ul>

<h3 id="datapersistencewithjpaandhsql">Data Persistence with JPA and HSQL</h3>

<ul>
<li><a href="https://hellokoding.com/jpa-one-to-one-foreign-key-relationship-mapping-example-with-spring-boot-hsql/">JPA One-To-One Foreign Key Relationship Mapping Example with Spring Boot, Spring Data JPA and HSQL</a></li>
<li><a href="https://hellokoding.com/jpa-one-to-one-shared-primary-key-relationship-mapping-example-with-spring-boot-hsql/">JPA One-To-One Shared Primary Key Relationship</a></li></ul>]]></description><link>http://hellokoding.com/spring-boot-tutorial-series/</link><guid isPermaLink="false">cef30fb8-d5e3-472a-925f-3de25e2219d1</guid><category><![CDATA[Series]]></category><category><![CDATA[Spring Boot]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Fri, 30 Jun 2017 21:59:08 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/06/SpringBoot.png" medium="image"/><content:encoded><![CDATA[<h3 id="helloworld">Hello World</h3>

<ul>
<li><a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a></li>
<li><a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a></li>
<li><a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a></li>
</ul>

<h3 id="datapersistencewithjpaandhsql">Data Persistence with JPA and HSQL</h3>

<ul>
<li><a href="https://hellokoding.com/jpa-one-to-one-foreign-key-relationship-mapping-example-with-spring-boot-hsql/">JPA One-To-One Foreign Key Relationship Mapping Example with Spring Boot, Spring Data JPA and HSQL</a></li>
<li><a href="https://hellokoding.com/jpa-one-to-one-shared-primary-key-relationship-mapping-example-with-spring-boot-hsql/">JPA One-To-One Shared Primary Key Relationship Mapping Example with Spring Boot, Spring Data JPA and HSQL</a></li>
<li><a href="https://hellokoding.com/jpa-one-to-many-relationship-mapping-example-with-spring-boot-hsql/">JPA One-To-Many Relationship Mapping Example with Spring Boot, Spring Data JPA and HSQL</a></li>
<li><a href="https://hellokoding.com/jpa-many-to-many-relationship-mapping-example-with-spring-boot-hsql/">JPA Many-To-Many Relationship Mapping Example with Spring Boot, Spring Data JPA and HSQL</a></li>
<li><a href="https://hellokoding.com/jpa-many-to-many-extra-columns-relationship-mapping-example-with-spring-boot-hsql/">JPA Many-To-Many Extra Columns Relationship Mapping Example with Spring Boot, Spring Data JPA and HSQL</a></li>
</ul>

<h3 id="datapersistencewithjpaandmysql">Data Persistence with JPA and MySQL</h3>

<ul>
<li><a href="https://hellokoding.com/jpa-one-to-one-foreignkey-relationship-example-with-spring-boot-maven-and-mysql/">JPA One-To-One Foreign Key Relationship Mapping Example with Spring Boot, Spring Data JPA and MySQL</a></li>
<li><a href="https://hellokoding.com/jpa-one-to-one-shared-primary-key-relationship-mapping-example-with-spring-boot-maven-and-mysql/">JPA One-To-One Shared Primary Key Relationship Mapping Example with Spring Boot, Spring Data JPA and MySQL</a></li>
<li><a href="https://hellokoding.com/jpa-one-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/">JPA One-To-Many Relationship Mapping Example with Spring Boot, Spring Data JPA and MySQL</a></li>
<li><a href="https://hellokoding.com/jpa-many-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/">JPA Many-To-Many Relationship Mapping Example with Spring Boot, Spring Data JPA and MySQL</a></li>
<li><a href="https://hellokoding.com/jpa-many-to-many-extra-columns-relationship-mapping-example-with-spring-boot-maven-and-mysql/">JPA Many-To-Many Extra Columns Relationship Mapping Example with Spring Boot, Spring Data JPA and MySQL</a></li>
</ul>

<h3 id="restfulapi">RESTful API</h3>

<ul>
<li><a href="https://hellokoding.com/restful-api-example-with-spring-boot-spring-data-rest-and-mysql/">RESTful API Example with Spring Boot, Spring Data REST and MySQL</a></li>
<li><a href="https://hellokoding.com/restful-api-example-with-spring-boot-spring-data-rest-one-to-many-relationship-and-mysql/">RESTful API Example with Spring Boot, Spring Data REST, Spring Data JPA One To Many Relationship and MySQL</a></li>
</ul>

<h3 id="security">Security</h3>

<ul>
<li><a href="https://hellokoding.com/registration-and-login-example-with-spring-security-spring-boot-spring-data-jpa-hsql-jsp/">Registration and Login Example with Spring Boot, Spring Security, Spring Data JPA and HSQL</a></li>
<li><a href="https://hellokoding.com/hello-single-sign-on-sso-with-json-web-token-jwt-spring-boot/">Single Sign On (SSO), Scalable Authentication Example with JSON Web Token (JWT) and Spring Boot</a></li>
<li><a href="https://hellokoding.com/scalable-authentication-single-sign-on-out-sso-example-with-json-web-token-jwt-cookie-redis-java-spring-boot-freemarker/">Single Sign Out, Scalable Authentication Example with JSON Web Token (JWT), Spring Boot, Redis</a></li>
</ul>]]></content:encoded></item><item><title><![CDATA[RESTful API Example with Spring Boot, Spring Data REST and MySQL]]></title><description><![CDATA[<p>This post walks you through the process of creating a RESTful API Example with Spring Data REST and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── restfulapi
│       │               ├── Application.</code></pre>]]></description><link>http://hellokoding.com/restful-api-example-with-spring-boot-spring-data-rest-and-mysql/</link><guid isPermaLink="false">90c55194-2e0a-4c24-9bb4-f9bc1809520d</guid><category><![CDATA[Arch]]></category><category><![CDATA[RESTful]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[Spring Data REST]]></category><category><![CDATA[Spring Data JPA]]></category><category><![CDATA[Java]]></category><category><![CDATA[MySQL]]></category><category><![CDATA[cURL]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Sat, 24 Jun 2017 07:19:55 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/06/RESTfulAPI.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/06/RESTfulAPI.png" alt="RESTful API Example with Spring Boot, Spring Data REST and MySQL"><p>This post walks you through the process of creating a RESTful API Example with Spring Data REST and MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL Server 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Spring Data REST</li>
<li>Spring Data JPA</li>
<li>MySQL</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── restfulapi
│       │               ├── Application.java
│       │               ├── model
│       │               │   └── Book.java
│       │               └── repository
│       │                   └── BookRepository.java
│       └── resources
│           └── application.properties
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql/blob/master/pom.xml">
</code></pre>

<h3 id="createdatabase">Create database</h3>

<p>Create a new empty MySQL database named <code>restful_api</code>. Tables will be auto created by Hibernate when the application started</p>

<h3 id="createdomainobject">Create domain object</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/model/Book.java">
</code></pre>

<h3 id="springdatarepository">Spring Data Repository</h3>

<p>Spring Data JPA and Spring Data Rest will auto create some helper methods and RESTful APIs. For this example, we only need to extend JpaRepository</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/repository/BookRepository.java">
</code></pre>

<h3 id="applicationproperties">Application Properties</h3>

<pre><code class="language-markup embedfile-https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql/blob/master/src/main/resources/application.properties">
</code></pre>

<h3 id="runtheapplication">Run the application</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql/blob/master/src/main/java/com/hellokoding/restfulapi/Application.java">
</code></pre>

<p>Type <code>mvn clean spring-boot:run</code> on terminal at the project root directory to run</p>

<h3 id="testtheapplication">Test the application</h3>

<p>Create some new books  </p>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"title\" : \"Hello Koding\", \"description\": \"Simple coding examples and tutorials\"}" http://localhost:8080/books  
</code></pre>

<pre><code>curl -i -X POST -H "Content-Type:application/json" -d "{\"title\" : \"Hello Koding 2\", \"description\": \"Simple coding examples and tutorials 2\"}" http://localhost:8080/books  
</code></pre>

<p>Find all books  </p>

<pre><code>curl http://localhost:8080/books  
</code></pre>

<p>Find book with id=2  </p>

<pre><code>curl curl http://localhost:8080/books/2  
</code></pre>

<p>Update book id 2  </p>

<pre><code>curl -i -X PATCH -H "Content-Type:application/json" -d "{\"title\" : \"Hello Koding 2 updated\"}" http://localhost:8080/books/2  
</code></pre>

<p>Replace book id 2  </p>

<pre><code>curl -i -X PUT -H "Content-Type:application/json" -d "{\"title\" : \"Hello Koding 2 replaced\"}" http://localhost:8080/books/2  
</code></pre>

<p>Delete book id 2</p>

<pre><code>curl -i -X DELETE http://localhost:8080/books/2  
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/restfulapi-springboot-springdatarest-mysql.git</code></p>

<p><a href="https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql">https://github.com/hellokoding/restfulapi-springboot-springdatarest-mysql</a></p>]]></content:encoded></item><item><title><![CDATA[Single Sign Out, Scalable Authentication Example with JSON Web Token (JWT), Spring Boot and Redis]]></title><description><![CDATA[<p>This post walks you through the process of creating the Single Sign Out, Scalable Authentication Example with <a href="https://jwt.io/">JSON Web Token (JWT)</a>, Spring Boot, Redis.</p>

<p><big></big></p>

<p><pre>
Spring Boot Hello World Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World</a></pre></p>]]></description><link>http://hellokoding.com/scalable-authentication-single-sign-on-out-sso-example-with-json-web-token-jwt-cookie-redis-java-spring-boot-freemarker/</link><guid isPermaLink="false">93ae291e-5fe2-4730-9705-b11680a4c1c6</guid><category><![CDATA[Arch]]></category><category><![CDATA[Scale]]></category><category><![CDATA[Security]]></category><category><![CDATA[Auth]]></category><category><![CDATA[SSO]]></category><category><![CDATA[JWT]]></category><category><![CDATA[Cookie]]></category><category><![CDATA[Redis]]></category><category><![CDATA[Java]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[FreeMarker]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Tue, 14 Mar 2017 15:51:10 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/03/hello-sso-jwt.gif" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/03/hello-sso-jwt.gif" alt="Single Sign Out, Scalable Authentication Example with JSON Web Token (JWT), Spring Boot and Redis"><p>This post walks you through the process of creating the Single Sign Out, Scalable Authentication Example with <a href="https://jwt.io/">JSON Web Token (JWT)</a>, Spring Boot, Redis.</p>

<p><big></big></p>

<p><pre>
Spring Boot Hello World Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a>
</pre></p>

<h3 id="whatyoullbuild">What you'll build</h3>

<p>You'll build 3 separated services:</p>

<ul>
<li><p>1 Authentication Service: will be deployed at <code>localhost:8080</code>.</p></li>
<li><p>2 Resource Services (to simplify, we use the same code base): will be deployed at <code>localhost:8180</code> and <code>localhost:8280</code>.</p></li>
</ul>

<p><img src="http://hellokoding.com/content/images/2016/08/hello-sso-jwt.gif" alt="Single Sign Out, Scalable Authentication Example with JSON Web Token (JWT), Spring Boot and Redis"></p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>Redis</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Java</li>
<li>Single Sign On/Out</li>
<li>JSON Web Token</li>
<li>Redis</li>
<li>Spring Boot</li>
<li>Freemarker</li>
</ul>

<h1 id="authenticationservice">Authentication Service</h1>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── sso
│       │               └── auth
│       │                   ├── CookieUtil.java
│       │                   ├── JwtUtil.java
│       │                   ├── LoginController.java
│       │                   ├── RedisUtil.java
│       │                   └── WebApplication.java
│       └── resources
│           └── templates
│               └── login.ftl
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/pom.xml">
</code></pre>

<h3 id="cookieutil">CookieUtil</h3>

<p>JWT Token'll be saved to and extracted from browser cookies.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/auth/CookieUtil.java">
</code></pre>

<p><code>cookie.setSecure(secure)</code>: secure=true => work on HTTPS only.</p>

<p><code>cookie.setHttpOnly(true)</code>: invisible to JavaScript.</p>

<p><code>cookie.setMaxAge(maxAge)</code>: maxAge=0: expire cookie now, maxAge&lt;0: expire cookiie on browser exit.</p>

<p><code>cookie.setDomain(domain)</code>: visible to <code>domain</code> only.</p>

<p><code>cookie.setPath("/")</code>: visible to all paths.</p>

<h3 id="jwtutil">JwtUtil</h3>

<p>We use <a href="https://github.com/jwtk/jjwt">JJWT</a> to generate/parse JWT Token.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/auth/JwtUtil.java">
</code></pre>

<h3 id="redisutil">RedisUtil</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/auth/RedisUtil.java">
</code></pre>

<h3 id="logincontroller">LoginController</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/auth/LoginController.java">
</code></pre>

<p>To simplify, we use a HashMap (<code>credentials</code>) as user database.</p>

<h3 id="viewtemplate">View Template</h3>

<pre><code class="language-html embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/resources/templates/login.ftl">
</code></pre>

<h3 id="applicationconfiguration">Application Configuration</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-auth-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/auth/WebApplication.java">
</code></pre>

<h3 id="run">Run</h3>

<pre><code>mvn clean spring-boot:run
</code></pre>

<h1 id="resourceservice">Resource Service</h1>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── sso
│       │               └── resource
│       │                   ├── CookieUtil.java
│       │                   ├── JwtFilter.java
│       │                   ├── JwtUtil.java
│       │                   ├── RedisUtil.java
│       │                   ├── ResourceController.java
│       │                   └── WebApplication.java
│       └── resources
│           ├── application.properties
│           └── templates
│               └── protected-resource.ftl
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/single-sign-on-out-resources-jwt-cookie-redis-springboot-freemarker/blob/master/pom.xml">
</code></pre>

<h3 id="jwtfilter">JwtFilter</h3>

<p>JwtFilter enforces SSO. If JWT Token's not existed (unauthenticated), redirects to Authentication Service. If JWT Token's existed (authenticated), extracts user identity and forwards the request.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-resources-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/resource/JwtFilter.java">
</code></pre>

<h3 id="resourcecontroller">ResourceController</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-resources-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/resource/ResourceController.java">
</code></pre>

<h3 id="viewtemplate">View Template</h3>

<pre><code class="language-html embedfile-https://github.com/hellokoding/single-sign-on-out-resources-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/resources/templates/protected-resource.ftl">
</code></pre>

<h3 id="applicationconfiguration">Application Configuration</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-resources-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/resources/application.properties">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/single-sign-on-out-resources-jwt-cookie-redis-springboot-freemarker/blob/master/src/main/java/com/hellokoding/sso/resource/WebApplication.java">
</code></pre>

<h3 id="run">Run</h3>

<p>Resource Service 1</p>

<pre><code>mvn clean spring-boot:run -Dserver.port=8180
</code></pre>

<p>Resource Service 2</p>

<pre><code>mvn clean spring-boot:run -Dserver.port=8280
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/single-sign-on-out-jwt-cookie-redis-java-springboot-freemarker.git</code> <br>
<a href="https://github.com/hellokoding/single-sign-on-out-jwt-cookie-redis-java-springboot-freemarker">https://github.com/hellokoding/single-sign-on-out-jwt-cookie-redis-java-springboot-freemarker</a></p>]]></content:encoded></item><item><title><![CDATA[Single Sign On (SSO), Scalable Authentication Example with JSON Web Token (JWT) and Spring Boot]]></title><description><![CDATA[<p>This post walks you through the process of creating the <a href="https://en.wikipedia.org/wiki/Single_sign-on">Single Sign On (SSO)</a>, Scalable Authentication Example with <a href="https://jwt.io/">JSON Web Token (JWT)</a> and Spring Boot.</p>

<p><big></big></p>

<p><pre>
Hello Spring Boot Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World</a></pre></p>]]></description><link>http://hellokoding.com/hello-single-sign-on-sso-with-json-web-token-jwt-spring-boot/</link><guid isPermaLink="false">c8f55f9a-e2c1-4406-9730-cf660e312e5f</guid><category><![CDATA[Arch]]></category><category><![CDATA[Scale]]></category><category><![CDATA[Security]]></category><category><![CDATA[Auth]]></category><category><![CDATA[SSO]]></category><category><![CDATA[JWT]]></category><category><![CDATA[Cookie]]></category><category><![CDATA[Java]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[FreeMarker]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Mon, 01 Aug 2016 14:28:32 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2016/08/hello-sso-jwt-1.gif" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2016/08/hello-sso-jwt-1.gif" alt="Single Sign On (SSO), Scalable Authentication Example with JSON Web Token (JWT) and Spring Boot"><p>This post walks you through the process of creating the <a href="https://en.wikipedia.org/wiki/Single_sign-on">Single Sign On (SSO)</a>, Scalable Authentication Example with <a href="https://jwt.io/">JSON Web Token (JWT)</a> and Spring Boot.</p>

<p><big></big></p>

<p><pre>
Hello Spring Boot Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a>
</pre></p>

<h3 id="whatyoullbuild">What you'll build</h3>

<p>You'll build 3 separated services:</p>

<ul>
<li><p>1 Authentication Service: will be deployed at <code>localhost:8080</code>.</p></li>
<li><p>2 Resource Services (to simplify, we use the same code base): will be deployed at <code>localhost:8180</code> and <code>localhost:8280</code>.</p></li>
</ul>

<p><img src="http://hellokoding.com/content/images/2016/08/hello-sso-jwt.gif" alt="Single Sign On (SSO), Scalable Authentication Example with JSON Web Token (JWT) and Spring Boot"></p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Java</li>
<li>Single Sign On</li>
<li>JSON Web Token</li>
<li>Spring Boot</li>
<li>Freemarker</li>
</ul>

<h1 id="authenticationservice">Authentication Service</h1>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── sso
│       │               └── auth
│       │                   ├── CookieUtil.java
│       │                   ├── JwtUtil.java
│       │                   ├── LoginController.java
│       │                   └── WebApplication.java
│       ├── resources
│       │   └── application.properties
│       └── webapp
│           └── login.ftl
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/pom.xml">
</code></pre>

<h3 id="cookieutil">CookieUtil</h3>

<p>JWT Token'll be saved and extracted from browser cookies.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/src/main/java/com/hellokoding/sso/auth/CookieUtil.java">
</code></pre>

<p><code>cookie.setSecure(secure)</code>: secure=true => work on HTTPS only.</p>

<p><code>cookie.setHttpOnly(true)</code>: invisible to JavaScript.</p>

<p><code>cookie.setMaxAge(maxAge)</code>: maxAge=0: expire cookie now, maxAge&lt;0: expire cookiie on browser exit.</p>

<p><code>cookie.setDomain(domain)</code>: visible to <code>domain</code> only.</p>

<p><code>cookie.setPath("/")</code>: visible to all paths.</p>

<h3 id="jwtutil">JwtUtil</h3>

<p>We use <a href="https://github.com/jwtk/jjwt">JJWT</a> to generate/parse JWT Token.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/src/main/java/com/hellokoding/sso/auth/JwtUtil.java">
</code></pre>

<h3 id="logincontroller">LoginController</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/src/main/java/com/hellokoding/sso/auth/LoginController.java">
</code></pre>

<p>To simplify, we use a HashMap (<code>credentials</code>) as user database.</p>

<h3 id="viewtemplate">View Template</h3>

<pre><code class="language-html embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/src/main/webapp/login.ftl">
</code></pre>

<h3 id="applicationconfiguration">Application Configuration</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/src/main/resources/application.properties">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-auth/blob/master/src/main/java/com/hellokoding/sso/auth/WebApplication.java">
</code></pre>

<h3 id="run">Run</h3>

<pre><code>mvn clean spring-boot:run
</code></pre>

<h1 id="resourceservice">Resource Service</h1>

<h3 id="projectstructure">Project structure</h3>

<pre><code>── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── sso
│       │               └── resource
│       │                   ├── CookieUtil.java
│       │                   ├── JwtFilter.java
│       │                   ├── JwtUtil.java
│       │                   ├── ResourceController.java
│       │                   └── WebApplication.java
│       ├── resources
│       │   └── application.properties
│       └── webapp
│           └── protected-resource.ftl
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/hello-sso-jwt-resource/blob/master/pom.xml">
</code></pre>

<h3 id="jwtfilter">JwtFilter</h3>

<p>JwtFilter enforces SSO. If JWT Token's not existed (unauthenticated), redirects to Authentication Service. If JWT Token's existed (authenticated), extracts user identity and forwards the request.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-resource/blob/master/src/main/java/com/hellokoding/sso/resource/JwtFilter.java">
</code></pre>

<h3 id="resourcecontroller">ResourceController</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-resource/blob/master/src/main/java/com/hellokoding/sso/resource/ResourceController.java">
</code></pre>

<h3 id="viewtemplate">View Template</h3>

<pre><code class="language-html embedfile-https://github.com/hellokoding/hello-sso-jwt-resource/blob/master/src/main/webapp/protected-resource.ftl">
</code></pre>

<h3 id="applicationconfiguration">Application Configuration</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-resource/blob/master/src/main/resources/application.properties">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/hello-sso-jwt-resource/blob/master/src/main/java/com/hellokoding/sso/resource/WebApplication.java">
</code></pre>

<h3 id="run">Run</h3>

<p>Resource Service 1</p>

<pre><code>mvn clean spring-boot:run -Dserver.port=8180
</code></pre>

<p>Resource Service 2</p>

<pre><code>mvn clean spring-boot:run -Dserver.port=8280
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/hello-sso-jwt.git</code> <br>
<a href="https://github.com/hellokoding/hello-sso-jwt">https://github.com/hellokoding/hello-sso-jwt</a></p>]]></content:encoded></item><item><title><![CDATA[Hacker News App with React Native]]></title><description><![CDATA[<p>This post walks you through the process of creating a Hacker News App for iOS and Android devices with React Native. <br>
<big></big></p>

<p><pre>
If you're new to React Native or CSS Flexbox, it'd be best to walk your way through:
<a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started React Native</a>
<a href="https://facebook.github.io/react-native/docs/network.html">Networking: fetch, async and await</a>
<a href="https://facebook.github.io/react-native/docs/flexbox.html">Layout with Flexbox</a></pre></p>]]></description><link>http://hellokoding.com/hackernewsapp-with-reactnative/</link><guid isPermaLink="false">6c96ed94-f7be-4e4c-a998-34a18ae40396</guid><category><![CDATA[Apps]]></category><category><![CDATA[HackerNews]]></category><category><![CDATA[React Native]]></category><category><![CDATA[iOS]]></category><category><![CDATA[Android]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Wed, 27 Jul 2016 07:41:12 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/03/ReactNative-1.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/03/ReactNative-1.png" alt="Hacker News App with React Native"><p>This post walks you through the process of creating a Hacker News App for iOS and Android devices with React Native. <br>
<big></big></p>

<p><pre>
If you're new to React Native or CSS Flexbox, it'd be best to walk your way through:
<a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started React Native</a>
<a href="https://facebook.github.io/react-native/docs/network.html">Networking: fetch, async and await</a>
<a href="https://facebook.github.io/react-native/docs/flexbox.html">Layout with Flexbox</a>
</pre></p>

<h2 id="whatyoullneed">What you'll need</h2>

<ul>
<li>MacOS, Xcode</li>
<li>NodeJS</li>
<li>NPM</li>
<li>React Native Package Manager</li>
<li>React Native 0.26</li>
</ul>

<h2 id="stack">Stack</h2>

<ul>
<li>ES6, ES7</li>
<li>React Native</li>
<li>CSS Flexbox</li>
</ul>

<h2 id="projectstructure">Project structure</h2>

<pre><code>├── android
├── ios
├── Dashboard.js
├── HackerNewsApi.js
├── PostWebView.js
├── PostsListView.js
├── index.android.js
├── index.ios.js
└── package.json
</code></pre>

<h2 id="projectdependencies">Project dependencies</h2>

<pre><code class="language-json embedfile-https://github.com/hellokoding/hackernewsapp-reactnative/blob/master/package.json">
</code></pre>

<h2 id="letsstart">Let's start</h2>

<h3 id="initproject">Init project</h3>

<pre><code>react-native init HackerNewsApp  
cd HackerNewsApp
</code></pre>

<h3 id="hackernewsapishttpsgithubcomhackernewsapi"><a href="https://github.com/HackerNews/API">Hacker News APIs</a></h3>

<p>We use some <a href="https://github.com/HackerNews/API">public APIs</a> of Hacker News  </p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/hackernewsapp-reactnative/blob/master/HackerNewsApi.js">
</code></pre>

<h3 id="webview">Web View</h3>

<pre><code class="language-js embedfile-https://github.com/hellokoding/hackernewsapp-reactnative/blob/master/PostWebView.js">
</code></pre>

<h3 id="listview">List View</h3>

<p>Install <a href="https://github.com/FaridSafi/react-native-gifted-listview">GiftedListView</a> and <a href="https://github.com/TylerLH/react-native-timeago">react-native-timeago</a>  </p>

<pre><code>npm install react-native-gifted-listview --save  
npm install react-native-timeago --save
</code></pre>

<pre><code class="language-js embedfile-https://github.com/hellokoding/hackernewsapp-reactnative/blob/master/PostsListView.js">
</code></pre>

<h3 id="dashboard">Dashboard</h3>

<p>Install <a href="https://github.com/exponentjs/react-native-tab-navigator">react-native-tab-navigator</a> and <a href="https://github.com/oblador/react-native-vector-icons">react-native-vector-icons</a></p>

<pre><code>npm install react-native-tab-navigator --save  
npm install react-native-vector-icons --save  
npm install rnpm -g  
rnpm link
</code></pre>

<pre><code class="language-js embedfile-https://github.com/hellokoding/hackernewsapp-reactnative/blob/master/Dashboard.js">
</code></pre>

<h3 id="finalpiece">Final piece</h3>

<pre><code class="language-js embedfile-https://github.com/hellokoding/hackernewsapp-reactnative/blob/master/index.ios.js">
</code></pre>

<h3 id="run">Run</h3>

<pre><code>react-native run-ios
</code></pre>

<h2 id="sourcecode">Source code</h2>

<p><code>git@github.com:hellokoding/hackernewsapp-reactnative.git</code>
<a href="https://github.com/hellokoding/hackernewsapp-reactnative">https://github.com/hellokoding/hackernewsapp-reactnative</a></p>]]></content:encoded></item><item><title><![CDATA[Todo App with React Native, Realm]]></title><description><![CDATA[<p>This post walks you through the process of creating a Todo App for iOS and Android devices with React Native, Realm. <br>
<big></big></p>

<p><pre>
If you're new to React Native, Realm or CSS Flexbox, it'd be best to walk your way through:
<a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started React Native</a>
<a href="https://realm.io/docs/react-native/latest/">Getting Started Realm React Native</a>
<a href="https://facebook.github.io/react-native/docs/flexbox.html">Layout with</a></pre></p>]]></description><link>http://hellokoding.com/todo-app-with-react-native-realm/</link><guid isPermaLink="false">8140e02f-b97b-4a74-84f3-63a3ae4cef7d</guid><category><![CDATA[Apps]]></category><category><![CDATA[Todo]]></category><category><![CDATA[React Native]]></category><category><![CDATA[Realm]]></category><category><![CDATA[iOS]]></category><category><![CDATA[Android]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Wed, 13 Jul 2016 04:12:51 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/02/hellokoding-todoapp-reactnative--2-.gif" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/02/hellokoding-todoapp-reactnative--2-.gif" alt="Todo App with React Native, Realm"><p>This post walks you through the process of creating a Todo App for iOS and Android devices with React Native, Realm. <br>
<big></big></p>

<p><pre>
If you're new to React Native, Realm or CSS Flexbox, it'd be best to walk your way through:
<a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started React Native</a>
<a href="https://realm.io/docs/react-native/latest/">Getting Started Realm React Native</a>
<a href="https://facebook.github.io/react-native/docs/flexbox.html">Layout with Flexbox</a>
</pre></p>

<h2 id="whatyoullbuild">What you'll build</h2>

<p><img src="http://hellokoding.com/content/images/2016/07/hellokoding-todoapp-reactnative.gif" alt="Todo App with React Native, Realm"></p>

<h2 id="whatyoullneed">What you'll need</h2>

<ul>
<li>MacOS, Xcode</li>
<li>NodeJS</li>
<li>NPM</li>
<li>React Native 0.28+</li>
</ul>

<h2 id="stack">Stack</h2>

<ul>
<li>ES6</li>
<li>React Native</li>
<li>CSS Flexbox</li>
</ul>

<h2 id="projectstructure">Project structure</h2>

<pre><code>├── android
├── ios
├── src
│   ├── CheckBox.js
│   ├── ListViewItem.js
│   ├── ListView.js
│   ├── OmniBox.js
│   ├── TodoModel.js
│   ├── TodoService.js
│   └── Utils.js
├── index.android.js
├── index.ios.js
└── package.json
</code></pre>

<h2 id="projectdependencies">Project dependencies</h2>

<pre><code class="language-json embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/package.json">
</code></pre>

<h2 id="letsstart">Let's start</h2>

<h3 id="initproject">Init project</h3>

<pre><code>react-native init TodoApp  
cd TodoApp
</code></pre>

<h3 id="utils">Utils</h3>

<p>We build some common functions  </p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/Utils.js">
</code></pre>

<p><code>Realm React Native</code> has not support auto-id yet. So we create <code>guid</code> to generate a unique id for data model (<code>TodoModel</code>).</p>

<h3 id="datamodel">Data Model</h3>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/TodoModel.js">
</code></pre>

<h3 id="localdatapersistencewithrealm">Local data persistence with Realm</h3>

<p>Install Realm React Native  </p>

<pre><code>npm install realm --save  
react-native link
</code></pre>

<p>We wrap some built-in Realm functions in <code>TodoService.js</code></p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/TodoService.js">
</code></pre>

<h3 id="makeacheckbox">Make a CheckBox</h3>

<p>React Native does not have CheckBox, so we make one.</p>

<p>Install <a href="https://github.com/oblador/react-native-vector-icons">react-native-vector-icons</a></p>

<pre><code>npm install react-native-vector-icons --save  
react-native link
</code></pre>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/CheckBox.js">
</code></pre>

<p><code>onPress={this.props.onCheckBoxPressed}</code>: when checkbox's clicked, the <code>onCheckBoxPressed</code> function of parent component 'd be called.</p>

<h3 id="omnibox">OmniBox</h3>

<p>It's a <code>TextInput</code>, can search on typing or add a new Todo (if not existed) on pressing <code>Return/Enter</code>.</p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/OmniBox.js">
</code></pre>

<p><code>onChange={this.onChange}</code>: handles Search.</p>

<p><code>onKeyPress={this.onKeyPress}</code>: handles Add  new a todo.</p>

<p><code>this.props.updateDataList(dataList);</code>: the <code>updateDataList</code> function of parent component'd be called.</p>

<h3 id="listviewitem">ListViewItem</h3>

<p>We'll build a ListView Item to show <code>TodoModel</code>  </p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/ListViewItem.js">
</code></pre>

<h3 id="sortablelistview">Sortable ListView</h3>

<p>It shows Todo list. User can drag and drop a Todo item to sort.</p>

<p>Install <a href="https://github.com/deanmcpherson/react-native-sortable-listview">react-native-sortable-listview</a></p>

<pre><code>npm install react-native-sortable-listview --save
</code></pre>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/src/ListView.js">
</code></pre>

<h3 id="finalpiece">Final piece</h3>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative-realm/blob/master/index.ios.js">
</code></pre>

<h3 id="run">Run</h3>

<pre><code>react-native run-ios
</code></pre>

<h2 id="sourcecode">Source code</h2>

<p><code>git@github.com:hellokoding/todoapp-reactnative-realm.git</code>
<a href="https://github.com/hellokoding/todoapp-reactnative-realm">https://github.com/hellokoding/todoapp-reactnative-realm</a></p>

<p><big></big></p>

<p><pre>
Todo App with React Native series:
<a href="https://hellokoding.com/todo-app-with-react-native/">Todo App with React Native</a>
<a href="https://hellokoding.com/todo-app-with-react-native-realm/">Todo App with React Native, Realm</a>
</pre></p>]]></content:encoded></item><item><title><![CDATA[Uploading Multiple Files Example with Spring Boot]]></title><description><![CDATA[<p>This post walks you through the process of creating the Uploading Multiple Files Example with Spring Boot.</p>

<p><big></big></p>

<p><pre>
Hello Spring Boot Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a>
</pre></p>

<h3 id="whatyoullbuild">What you'll build</h3>

<p><img src="http://hellokoding.com/content/images/2016/07/uploadfiles-springboot-1.png" alt=""></p>

<h3 id="whatyoullneed">What you'll</h3>]]></description><link>http://hellokoding.com/uploading-multiple-files-example-with-spring-boot/</link><guid isPermaLink="false">2c2856aa-de58-458f-b769-b311307eca81</guid><category><![CDATA[Utils]]></category><category><![CDATA[Upload]]></category><category><![CDATA[Java]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[FreeMarker]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Tue, 12 Jul 2016 09:14:27 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/02/uploadfiles-springboot-1.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/02/uploadfiles-springboot-1.png" alt="Uploading Multiple Files Example with Spring Boot"><p>This post walks you through the process of creating the Uploading Multiple Files Example with Spring Boot.</p>

<p><big></big></p>

<p><pre>
Hello Spring Boot Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a>
</pre></p>

<h3 id="whatyoullbuild">What you'll build</h3>

<p><img src="http://hellokoding.com/content/images/2016/07/uploadfiles-springboot-1.png" alt="Uploading Multiple Files Example with Spring Boot"></p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7 or later</li>
<li>Maven 3 or later</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Java</li>
<li>Spring Boot</li>
<li>Freemarker</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── uploadingfiles
│       │               ├── Application.java
│       │               └── UploadingController.java
│       ├── resources
│       │   └── application.properties
│       └── webapp
│           └── uploading.ftl
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/uploadingfiles-springboot/blob/master/pom.xml">
</code></pre>

<h3 id="uploadingcontroller">Uploading Controller</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/uploadingfiles-springboot/blob/master/src/main/java/com/hellokoding/uploadingfiles/UploadingController.java">
</code></pre>

<h3 id="viewtemplate">View Template</h3>

<pre><code class="language-html embedfile-https://github.com/hellokoding/uploadingfiles-springboot/blob/master/src/main/webapp/uploading.ftl">
</code></pre>

<pre><code>&lt;form name="uploadingForm" enctype="multipart/form-data" action="/" method="POST"&gt;  
</code></pre>

<p><code>action="/"</code> and <code>method="POST"</code> map with <code>uploadingPost()</code> of <code>UploadingController</code>, <code>enctype="multipart/form-data"</code> works with <code>MultipartFile</code>.</p>

<h3 id="applicationconfiguration">Application Configuration</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/uploadingfiles-springboot/blob/master/src/main/resources/application.properties">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/uploadingfiles-springboot/blob/master/src/main/java/com/hellokoding/uploadingfiles/Application.java">
</code></pre>

<p><code>new File(UploadingController.uploadingdir).mkdirs();</code> makes a directory for uploading files if not exists.</p>

<h3 id="run">Run</h3>

<pre><code>mvn spring-boot:run
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/uploadingfiles-springboot.git</code>
<a href="https://github.com/hellokoding/uploadingfiles-springboot">https://github.com/hellokoding/uploadingfiles-springboot</a></p>

<h3 id="links">Links</h3>

<p><a href="https://developer.mozilla.org/en/docs/Using_files_from_web_applications">Using files from web applications</a> <br>
<a href="https://spring.io/guides/gs/uploading-files/">Getting Started Uploading Files</a></p>]]></content:encoded></item><item><title><![CDATA[Todo App with React Native]]></title><description><![CDATA[<p>This post walks you through the process of creating a Todo App for iOS and Android devices with React Native. <br>
<big></big></p>

<p><pre>
If you're new to React Native or CSS Flexbox, it'd be best to walk your way through:
<a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started React Native</a>
<a href="https://facebook.github.io/react-native/docs/flexbox.html">Layout with Flexbox</a>
</pre></p>

<h2 id="whatyoullbuild">What you'll build</h2>

<p><img src="http://hellokoding.com/content/images/2017/03/hellokoding-todoapp-reactnative.gif" alt=""></p>

<h2 id="whatyoullneed">What you'll need</h2>]]></description><link>http://hellokoding.com/todo-app-with-react-native/</link><guid isPermaLink="false">55a70f93-479e-40f4-8339-f08704a03b56</guid><category><![CDATA[Apps]]></category><category><![CDATA[Todo]]></category><category><![CDATA[React Native]]></category><category><![CDATA[iOS]]></category><category><![CDATA[Android]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Tue, 12 Jul 2016 04:08:05 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/03/hellokoding-todoapp-reactnative-1.gif" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/03/hellokoding-todoapp-reactnative-1.gif" alt="Todo App with React Native"><p>This post walks you through the process of creating a Todo App for iOS and Android devices with React Native. <br>
<big></big></p>

<p><pre>
If you're new to React Native or CSS Flexbox, it'd be best to walk your way through:
<a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started React Native</a>
<a href="https://facebook.github.io/react-native/docs/flexbox.html">Layout with Flexbox</a>
</pre></p>

<h2 id="whatyoullbuild">What you'll build</h2>

<p><img src="http://hellokoding.com/content/images/2017/03/hellokoding-todoapp-reactnative.gif" alt="Todo App with React Native"></p>

<h2 id="whatyoullneed">What you'll need</h2>

<ul>
<li>MacOS, Xcode</li>
<li>NodeJS</li>
<li>NPM</li>
<li>React Native 0.28+</li>
</ul>

<h2 id="stack">Stack</h2>

<ul>
<li>ES6</li>
<li>React Native</li>
<li>CSS Flexbox</li>
</ul>

<h2 id="projectstructure">Project structure</h2>

<pre><code>├── android
├── ios
├── src
│   ├── CheckBox.js
│   ├── ListViewItem.js
│   ├── ListView.js
│   ├── OmniBox.js
│   ├── TodoModel.js
│   └── Utils.js
├── index.android.js
├── index.ios.js
└── package.json
</code></pre>

<h2 id="projectdependencies">Project dependencies</h2>

<pre><code class="language-json embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/package.json">
</code></pre>

<h2 id="letsstart">Let's start</h2>

<h3 id="initproject">Init project</h3>

<pre><code>react-native init TodoApp  
cd TodoApp
</code></pre>

<h3 id="datamodel">Data Model</h3>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/src/TodoModel.js">
</code></pre>

<h3 id="utils">Utils</h3>

<p>We define some common functions  </p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/src/Utils.js">
</code></pre>

<h3 id="makeacheckbox">Make a CheckBox</h3>

<p>React Native does not have CheckBox, so we make one.</p>

<p>Install <a href="https://github.com/oblador/react-native-vector-icons">react-native-vector-icons</a></p>

<pre><code>npm install react-native-vector-icons --save  
react-native link
</code></pre>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/src/CheckBox.js">
</code></pre>

<p><code>onPress={this.props.onCheckBoxPressed}</code>: when checkbox's clicked, the <code>onCheckBoxPressed</code> function of parent component 'd be called.</p>

<h3 id="omnibox">OmniBox</h3>

<p>It's a <code>TextInput</code>, can search on typing or add a new Todo (if not existed) on pressing <code>Return/Enter</code>.</p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/src/OmniBox.js">
</code></pre>

<p><code>onChange={this.onChange}</code>: handles Search.</p>

<p><code>onKeyPress={this.onKeyPress}</code>: handles Add  new a todo.</p>

<p><code>this.props.updateDataList(dataList);</code>: the <code>updateDataList</code> function of parent component'd be called.</p>

<h3 id="listviewitem">ListViewItem</h3>

<p>We'll build a ListViewItem to show <code>TodoModel</code>  </p>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/src/ListViewItem.js">
</code></pre>

<h3 id="sortablelistview">Sortable ListView</h3>

<p>It shows Todo list. User can drag and drop a Todo item to sort.</p>

<p>Install <a href="https://github.com/deanmcpherson/react-native-sortable-listview">react-native-sortable-listview</a></p>

<pre><code>npm install react-native-sortable-listview --save
</code></pre>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/src/ListView.js">
</code></pre>

<h3 id="finalpiece">Final piece</h3>

<pre><code class="language-js embedfile-https://github.com/hellokoding/todoapp-reactnative/blob/master/index.ios.js">
</code></pre>

<h3 id="run">Run</h3>

<pre><code>react-native run-ios
</code></pre>

<h2 id="sourcecode">Source code</h2>

<p><code>git@github.com:hellokoding/todoapp-reactnative.git</code>
<a href="https://github.com/hellokoding/todoapp-reactnative">https://github.com/hellokoding/todoapp-reactnative</a></p>

<p><big></big></p>

<p><pre>
Todo App with React Native series:
<a href="https://hellokoding.com/todo-app-with-react-native/">Todo App with React Native</a>
<a href="https://hellokoding.com/todo-app-with-react-native-realm/">Todo App with React Native, Realm</a>
</pre></p>]]></content:encoded></item><item><title><![CDATA[jOOQ Example with MySQL]]></title><description><![CDATA[<p>This post walks you through the process of creating a jOOQ example with MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Java</li>
<li>jOOQ</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       └── java
│           └── com
│               └── hellokoding
│                   └── jooq
│                       ├── model
│                       │   ├── tables
│                       │   │   ├── records
│                       │   │   │   └── AuthorRecord.java
│                       │   │   └── Author.java
│                       │   ├── DefaultCatalog.java
│                       │   ├── Keys.java
│                       │   ├── Library.java
│                       │   └── Tables.</code></pre>]]></description><link>http://hellokoding.com/jooq-example-with-mysql/</link><guid isPermaLink="false">5143aadf-d078-4608-89b3-637b17ddf537</guid><category><![CDATA[Persistence]]></category><category><![CDATA[Java]]></category><category><![CDATA[jOOQ]]></category><category><![CDATA[MySQL]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Mon, 11 Jul 2016 03:54:07 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/03/JOOQ.png" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/03/JOOQ.png" alt="jOOQ Example with MySQL"><p>This post walks you through the process of creating a jOOQ example with MySQL.</p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7+</li>
<li>Maven 3+</li>
<li>MySQL 5.6+</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Java</li>
<li>jOOQ</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       └── java
│           └── com
│               └── hellokoding
│                   └── jooq
│                       ├── model
│                       │   ├── tables
│                       │   │   ├── records
│                       │   │   │   └── AuthorRecord.java
│                       │   │   └── Author.java
│                       │   ├── DefaultCatalog.java
│                       │   ├── Keys.java
│                       │   ├── Library.java
│                       │   └── Tables.java
│                       └── Application.java
├── create_db.sql
└── pom.xml
</code></pre>

<p>Files and sub-directories in <code>com/hellokoding/jooq/model</code>directory will be auto generated by jOOQ. We only play with <code>pom.xml</code>, <code>create_db.sql</code> and <code>com/hellokoding/jooq/Application.java</code></p>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/jooq-mysql/blob/master/pom.xml">
</code></pre>

<p><code>jooq-codegen-maven</code> plugin's used for generate domain and DAO objects in <code>com/hellokoding/jooq/model</code></p>

<h3 id="createdatabase">Create database</h3>

<p>Run below script to create a sample MySQL database</p>

<pre><code class="language-sql embedfile-https://github.com/hellokoding/jooq-mysql/blob/master/create_db.sql">
</code></pre>

<h3 id="run">Run</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/jooq-mysql/blob/master/src/main/java/com/hellokoding/jooq/Application.java">
</code></pre>

<p><code>System.property()</code>'s bound to <code>systemProperty</code> of <code>exec-maven-plugin</code> configuration in <code>pom.xml</code></p>

<p>Run with this command <code>mvn clean compile exec:java -Dexec.mainClass=com.hellokoding.jooq.Application -Dexec.cleanupDaemonThreads=false</code></p>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/jooq-mysql.git</code>
<a href="https://github.com/hellokoding/jooq-mysql">https://github.com/hellokoding/jooq-mysql</a></p>

<h3 id="links">Links</h3>

<p><a href="http://www.jooq.org/doc/3.8/manual-single-page/">The jOOQ User Manual</a></p>]]></content:encoded></item><item><title><![CDATA[Spring Boot Hello World Example with Thymeleaf]]></title><description><![CDATA[<p>This post walks you through the process of creating a Hello World example with Spring Boot, Thymeleaf.</p>

<p><big></big></p>

<p><pre>
Hello Spring Boot Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a>
</pre></p>

<h3 id="whatyoullbuild">What you'll build</h3>

<p><img src="http://hellokoding.com/content/images/2016/07/hello.gif" alt=""></p>

<h3 id="whatyoullneed">What you'll</h3>]]></description><link>http://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/</link><guid isPermaLink="false">9258b4d9-e4d2-456b-baf1-682b00227968</guid><category><![CDATA[Hello]]></category><category><![CDATA[Java]]></category><category><![CDATA[Spring Boot]]></category><category><![CDATA[Thymeleaf]]></category><dc:creator><![CDATA[Giau Ngo]]></dc:creator><pubDate>Wed, 06 Jul 2016 07:30:44 GMT</pubDate><media:content url="http://hellokoding.com/content/images/2017/02/hello--1--1.gif" medium="image"/><content:encoded><![CDATA[<img src="http://hellokoding.com/content/images/2017/02/hello--1--1.gif" alt="Spring Boot Hello World Example with Thymeleaf"><p>This post walks you through the process of creating a Hello World example with Spring Boot, Thymeleaf.</p>

<p><big></big></p>

<p><pre>
Hello Spring Boot Series:
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-freemarker/">Spring Boot Hello World Example with FreeMarker</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-thymeleaf/">Spring Boot Hello World Example with Thymeleaf</a>
- <a href="https://hellokoding.com/spring-boot-hello-world-example-with-jsp/">Spring Boot Hello World Example with JSP</a>
</pre></p>

<h3 id="whatyoullbuild">What you'll build</h3>

<p><img src="http://hellokoding.com/content/images/2016/07/hello.gif" alt="Spring Boot Hello World Example with Thymeleaf"></p>

<h3 id="whatyoullneed">What you'll need</h3>

<ul>
<li>JDK 1.7 or later</li>
<li>Maven 3 or later</li>
</ul>

<h3 id="stack">Stack</h3>

<ul>
<li>Spring Boot</li>
<li>Java</li>
</ul>

<h3 id="projectstructure">Project structure</h3>

<pre><code>├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── hellokoding
│       │           └── springboot
│       │               ├── HelloController.java
│       │               └── WebApplication.java
│       └── resources
│           ├── templates
│           │   └── hello.html
│           └── application.properties
└── pom.xml
</code></pre>

<h3 id="projectdependencies">Project dependencies</h3>

<pre><code class="language-xml embedfile-https://github.com/hellokoding/springboot-thymeleaf/blob/master/pom.xml">
</code></pre>

<h3 id="hellocontroller">Hello Controller</h3>

<p><code>Controller</code> maps HTTP Requests with <code>View</code>.</p>

<pre><code class="language-java embedfile-https://github.com/hellokoding/springboot-thymeleaf/blob/master/src/main/java/com/hellokoding/springboot/HelloController.java">
</code></pre>

<p><code>@RequestMapping</code> maps <code>/hello</code> request to <code>hello()</code> method.</p>

<p><code>name</code> is a query string parameter of <code>/hello</code> request.</p>

<p><code>Model</code> object passes value to <code>hello</code> view (<code>hello.html</code>).</p>

<h3 id="viewtemplate">View Template</h3>

<pre><code class="language-html embedfile-https://github.com/hellokoding/springboot-thymeleaf/blob/master/src/main/resources/templates/hello.html">
</code></pre>

<h3 id="applicationconfiguration">Application Configuration</h3>

<pre><code class="language-java embedfile-https://github.com/hellokoding/springboot-thymeleaf/blob/master/src/main/java/com/hellokoding/springboot/WebApplication.java">
</code></pre>

<pre><code class="language-java embedfile-https://github.com/hellokoding/springboot-thymeleaf/blob/master/src/main/resources/application.properties">
</code></pre>

<h3 id="run">Run</h3>

<pre><code>mvn spring-boot:run
</code></pre>

<h3 id="sourcecode">Source code</h3>

<p><code>git@github.com:hellokoding/springboot-thymeleaf.git</code>
<a href="https://github.com/hellokoding/springboot-thymeleaf">https://github.com/hellokoding/springboot-thymeleaf</a></p>

<p><big></big></p>

<p><pre>
You may also like the Hello Spring MVC Series:
- <a href="https://hellokoding.com/spring-mvc-4-hello-world-example-with-xml-configuration-maven-and-jsp/">Spring MVC 4 Hello World Example with XML Configuration, Maven and JSP</a>
- <a href="https://hellokoding.com/spring-mvc-4-hello-world-example-with-xml-configuration-maven-and-thymeleaf/">Spring MVC 4 Hello World Example with XML Configuration, Maven, and Thymeleaf</a>
</pre></p>

<h3 id="links">Links</h3>

<p><a href="https://spring.io/guides/gs/serving-web-content/">Serving Web Content with Spring MVC</a></p>]]></content:encoded></item></channel></rss>